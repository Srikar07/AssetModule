{"version":3,"sources":["webpack:///src/app/modules/auth/auth.module.ts","webpack:///src/app/modules/auth/registration/registration.component.ts","webpack:///src/app/modules/auth/registration/registration.component.html","webpack:///src/app/modules/auth/login/login.component.ts","webpack:///src/app/modules/auth/login/login.component.html","webpack:///src/app/modules/auth/logout/logout.component.ts","webpack:///src/app/modules/auth/logout/logout.component.html","webpack:///src/app/modules/auth/auth.component.ts","webpack:///src/app/modules/auth/auth.component.html","webpack:///src/app/modules/auth/forgot-password/forgot-password.component.ts","webpack:///src/app/modules/auth/forgot-password/forgot-password.component.html","webpack:///src/app/modules/auth/auth-routing.module.ts"],"names":["AuthModule","declarations","imports","RegistrationComponent","fb","authService","router","unsubscribe","isLoading$","currentUserValue","navigate","initForm","registrationForm","controls","group","fullname","compose","required","minLength","maxLength","email","password","cPassword","agree","validator","MatchPassword","hasError","result","Object","keys","f","forEach","key","value","newUser","setUser","registrationSubscr","registration","pipe","subscribe","user","push","sb","submit","selector","templateUrl","styleUrls","LoginComponent","route","defaultAuth","returnUrl","snapshot","queryParams","toString","loginForm","loginSubscr","login","LogoutComponent","logout","AuthComponent","today","Date","ErrorStates","ForgotPasswordComponent","errorState","NotSubmitted","errorStates","forgotPasswordForm","forgotPasswordSubscr","forgotPassword","NoError","HasError","routes","path","component","children","redirectTo","pathMatch","data","window","location","pathname","AuthRoutingModule","forChild","exports"],"mappings":";;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UA6BaA,U;;;;;cAAAA;;;;2BAAAA,U;AAAU,S;AAAA,kBATZ,CACP,4DADO,EAEP,2EAFO,EAGP,sEAHO,EAIP,0DAJO,EAKP,kEALO,EAMP,qEANO,CASY;;;;4HAAVA,U,EAAU;AAAA,yBAfnB,qEAemB,EAdnB,0FAcmB,EAbnB,kGAamB,EAZnB,wEAYmB,EAXnB,6DAWmB;AAXN,oBAGb,4DAHa,EAIb,2EAJa,EAKb,sEALa,EAMb,0DANa,EAOb,kEAPa,EAQb,qEARa;AAWM,S;AAHH,O;;;;;wEAGPA,U,EAAU;gBAjBtB,sDAiBsB;iBAjBb;AACRC,wBAAY,EAAE,CACZ,qEADY,EAEZ,0FAFY,EAGZ,kGAHY,EAIZ,wEAJY,EAKZ,6DALY,CADN;AAQRC,mBAAO,EAAE,CACP,4DADO,EAEP,2EAFO,EAGP,sEAHO,EAIP,0DAJO,EAKP,kEALO,EAMP,qEANO;AARD,W;AAiBa,U;;;;;;;;;;AC7BvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACsBI;;AACE;;AAGE;;AAAwB;;AAAsC;;AAChE;;AACF;;;;;;AA8KE;;AAME;;AACE;;AACE;;AACF;;AACF;;AACF;;;;;;AAuCA;;AACE;;AACF;;;;;;AAcJ;;AAGE;;AACE;;AACE;;AACF;;AACF;;AACF;;;;;;AAHM;;AAAA;;;;;;AALN;;;;;;;AACG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UD/PQC,qB;AAQX,uCACUC,EADV,EAEUC,WAFV,EAGUC,MAHV,EAGwB;AAAA;;AAFd,eAAAF,EAAA,GAAAA,EAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,MAAA,GAAAA,MAAA,CAAc,CANxB;;AACQ,eAAAC,WAAA,GAA8B,EAA9B,CAKgB,CALkB;;AAOxC,eAAKC,UAAL,GAAkB,KAAKH,WAAL,CAAiBG,UAAnC,CAFsB,CAGtB;;AACA,cAAI,KAAKH,WAAL,CAAiBI,gBAArB,EAAuC;AACrC,iBAAKH,MAAL,CAAYI,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD;AACF;;;;iBAED,oBAAQ;AACN,iBAAKC,QAAL;AACD,W,CAED;;;;eACA,eAAQ;AACN,mBAAO,KAAKC,gBAAL,CAAsBC,QAA7B;AACD;;;iBAED,oBAAW;AACT,iBAAKD,gBAAL,GAAwB,KAAKR,EAAL,CAAQU,KAAR,CACtB;AACEC,sBAAQ,EAAE,CACR,EADQ,EAER,0DAAWC,OAAX,CAAmB,CACjB,0DAAWC,QADM,EAEjB,0DAAWC,SAAX,CAAqB,CAArB,CAFiB,EAGjB,0DAAWC,SAAX,CAAqB,GAArB,CAHiB,CAAnB,CAFQ,CADZ;AASEC,mBAAK,EAAE,CACL,aADK,EAEL,0DAAWJ,OAAX,CAAmB,CACjB,0DAAWC,QADM,EAEjB,0DAAWG,KAFM,EAGjB,0DAAWF,SAAX,CAAqB,CAArB,CAHiB,EAIjB,0DAAWC,SAAX,CAAqB,GAArB,CAJiB,CAAnB,CAFK,CATT;AAkBEE,sBAAQ,EAAE,CACR,EADQ,EAER,0DAAWL,OAAX,CAAmB,CACjB,0DAAWC,QADM,EAEjB,0DAAWC,SAAX,CAAqB,CAArB,CAFiB,EAGjB,0DAAWC,SAAX,CAAqB,GAArB,CAHiB,CAAnB,CAFQ,CAlBZ;AA0BEG,uBAAS,EAAE,CACT,EADS,EAET,0DAAWN,OAAX,CAAmB,CACjB,0DAAWC,QADM,EAEjB,0DAAWC,SAAX,CAAqB,CAArB,CAFiB,EAGjB,0DAAWC,SAAX,CAAqB,GAArB,CAHiB,CAAnB,CAFS,CA1Bb;AAkCEI,mBAAK,EAAE,CAAC,KAAD,EAAQ,0DAAWP,OAAX,CAAmB,CAAC,0DAAWC,QAAZ,CAAnB,CAAR;AAlCT,aADsB,EAqCtB;AACEO,uBAAS,EAAE,qFAAyBC;AADtC,aArCsB,CAAxB;AAyCD;;;iBAED,kBAAS;AAAA;;AACP,iBAAKC,QAAL,GAAgB,KAAhB;AACA,gBAAMC,MAAM,GAAG,EAAf;AACAC,kBAAM,CAACC,IAAP,CAAY,KAAKC,CAAjB,EAAoBC,OAApB,CAA4B,UAAAC,GAAG,EAAI;AACjCL,oBAAM,CAACK,GAAD,CAAN,GAAc,KAAI,CAACF,CAAL,CAAOE,GAAP,EAAYC,KAA1B;AACD,aAFD;AAGA,gBAAMC,OAAO,GAAG,IAAI,4DAAJ,EAAhB;AACAA,mBAAO,CAACC,OAAR,CAAgBR,MAAhB;AACA,gBAAMS,kBAAkB,GAAG,KAAK/B,WAAL,CACxBgC,YADwB,CACXH,OADW,EAExBI,IAFwB,CAEnB,8DAFmB,EAGxBC,SAHwB,CAGd,UAACC,IAAD,EAAqB;AAC9B,kBAAIA,IAAJ,EAAU;AACR,qBAAI,CAAClC,MAAL,CAAYI,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD,eAFD,MAEO;AACL,qBAAI,CAACgB,QAAL,GAAgB,IAAhB;AACD;AACF,aATwB,CAA3B;AAUA,iBAAKnB,WAAL,CAAiBkC,IAAjB,CAAsBL,kBAAtB;AACD;;;iBAED,uBAAc;AACZ,iBAAK7B,WAAL,CAAiBwB,OAAjB,CAAyB,UAACW,EAAD;AAAA,qBAAQA,EAAE,CAACnC,WAAH,EAAR;AAAA,aAAzB;AACD;;;;;;;yBAhGUJ,qB,EAAqB,2H,EAAA,mI,EAAA,uH;AAAA,O;;;cAArBA,qB;AAAqB,yC;AAAA,iB;AAAA,gB;AAAA,yrE;AAAA;AAAA;ACblC;;AAEE;;AAKE;AAAA,qBAAY,IAAAwC,MAAA,EAAZ;AAAoB,aAApB;;AAGA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AAIA;;AAUA;;AACE;;AAAyD;;AAAQ;;AACjE;;AAWA;;AAQA;;AAQA;;AAQF;;AAIA;;AACE;;AAAyD;;AAAK;;AAC9D;;AASA;;AAQA;;AAQA;;AAQA;;AAQF;;AAIA;;AACE;;AACG;;AAAQ;;AAEX;;AAWA;;AAQA;;AAQA;;AAQF;;AAIA;;AACE;;AACG;;AAAgB;;AAEnB;;AAWA;;AAQA;;AAQA;;AAQA;;AAYF;;AAIA;;AACE;;AACE;;AAA8D;;AAC/C;;AAGZ;;AAAoB;;AACtB;;AACD;;AACF;;AACF;;AAIA;;AACE;;AAQE;;AACF;;AACA;;AAME;;AACF;;AAEA;;;;AAGF;;AAEF;;AAEF;;AAGA;;;;;;AA/PI;;AAAA;;AAee;;AAAA;;AAmBX;;AAAA;;AAKA;;AAAA,8FAA8B,yBAA9B,EAA8B,iHAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,iHAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,iHAA9B;;AAoBA;;AAAA;;AAGA;;AAAA,8FAA8B,yBAA9B,EAA8B,8GAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,8GAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,8GAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,8GAA9B;;AAsBA;;AAAA;;AAKA;;AAAA,8FAA8B,yBAA9B,EAA8B,iHAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,iHAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,kHAA9B;;AAsBA;;AAAA;;AAKA;;AAAA,8FAA8B,yBAA9B,EAA8B,mHAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,mHAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,mHAA9B;;AAQC;;AAAA;;AAiCD;;AAAA;;AAgBa;;AAAA;;;;;;;;;;wED9ORxC,qB,EAAqB;gBALjC,uDAKiC;iBALvB;AACTyC,oBAAQ,EAAE,kBADD;AAETC,uBAAW,EAAE,+BAFJ;AAGTC,qBAAS,EAAE,CAAC,+BAAD;AAHF,W;AAKuB,U;;;;;;;;;;;;;;;;;;AEdlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC4BI;;AACE;;AACE;;AACE;;AAAY;;AAAQ;;AAAuB;;AAAU;;AACrD;;AAAQ;;AAA0B;;AAAU;;AAC9C;;AACF;;AACF;;;;;;AAJ0B;;AAAA;;AACZ;;AAAA;;;;;;AAOd;;AACE;;AAGE;;AAAwB;;AAA+B;;AACzD;;AACF;;;;;;AAwHE;;AACE;;AACF;;;;;;AAcJ;;AAGE;;AACE;;AACE;;AACF;;AACF;;AACF;;;;;;AAHM;;AAAA;;;;;;AALN;;;;;;;AACG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UDzKQC,c;AAkBX,gCACU3C,EADV,EAEUC,WAFV,EAGU2C,KAHV,EAIU1C,MAJV,EAIwB;AAAA;;AAHd,eAAAF,EAAA,GAAAA,EAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAA2C,KAAA,GAAAA,KAAA;AACA,eAAA1C,MAAA,GAAAA,MAAA,CAAc,CArBxB;AACA;AACA;AACA;AACA;;AACA,eAAA2C,WAAA,GAAmB;AACjB7B,iBAAK,EAAE,gBADU;AAEjBC,oBAAQ,EAAE;AAFO,WAAnB,CAgBwB,CAPxB;;AACQ,eAAAd,WAAA,GAA8B,EAA9B,CAMgB,CANkB;;AAQxC,eAAKC,UAAL,GAAkB,KAAKH,WAAL,CAAiBG,UAAnC,CAFsB,CAGtB;;AACA,cAAI,KAAKH,WAAL,CAAiBI,gBAArB,EAAuC;AACrC,iBAAKH,MAAL,CAAYI,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD;AACF;;;;iBAED,oBAAQ;AACN,iBAAKC,QAAL,GADM,CAEN;;AACA,iBAAKuC,SAAL,GACI,KAAKF,KAAL,CAAWG,QAAX,CAAoBC,WAApB,CAAgC,YAAYC,QAAZ,EAAhC,KAA2D,GAD/D;AAEC,W,CAEH;;;;eACA,eAAQ;AACN,mBAAO,KAAKC,SAAL,CAAezC,QAAtB;AACD;;;iBAED,oBAAW;AACT,iBAAKyC,SAAL,GAAiB,KAAKlD,EAAL,CAAQU,KAAR,CAAc;AAC7BM,mBAAK,EAAE,CACL,KAAK6B,WAAL,CAAiB7B,KADZ,EAEL,0DAAWJ,OAAX,CAAmB,CACjB,0DAAWC,QADM,EAEjB,0DAAWG,KAFM,EAGjB,0DAAWF,SAAX,CAAqB,CAArB,CAHiB,EAIjB,0DAAWC,SAAX,CAAqB,GAArB,CAJiB,CAAnB,CAFK,CADsB;AAU7BE,sBAAQ,EAAE,CACR,KAAK4B,WAAL,CAAiB5B,QADT,EAER,0DAAWL,OAAX,CAAmB,CACjB,0DAAWC,QADM,EAEjB,0DAAWC,SAAX,CAAqB,CAArB,CAFiB,EAGjB,0DAAWC,SAAX,CAAqB,GAArB,CAHiB,CAAnB,CAFQ;AAVmB,aAAd,CAAjB;AAmBD;;;iBAED,kBAAS;AAAA;;AACP,iBAAKO,QAAL,GAAgB,KAAhB;AACA,gBAAM6B,WAAW,GAAG,KAAKlD,WAAL,CACjBmD,KADiB,CACX,KAAK1B,CAAL,CAAOV,KAAP,CAAaa,KADF,EACS,KAAKH,CAAL,CAAOT,QAAP,CAAgBY,KADzB,EAEjBK,IAFiB,CAEZ,8DAFY,EAGjBC,SAHiB,CAGP,UAACC,IAAD,EAAqB;AAC9B,kBAAIA,IAAJ,EAAU;AACR,sBAAI,CAAClC,MAAL,CAAYI,QAAZ,CAAqB,CAAC,MAAI,CAAGwC,SAAR,CAArB;AACD,eAFD,MAEO;AACL,sBAAI,CAACxB,QAAL,GAAgB,IAAhB;AACD;AACF,aATiB,CAApB;AAUA,iBAAKnB,WAAL,CAAiBkC,IAAjB,CAAsBc,WAAtB;AACD;;;iBAED,uBAAc;AACZ,iBAAKhD,WAAL,CAAiBwB,OAAjB,CAAyB,UAACW,EAAD;AAAA,qBAAQA,EAAE,CAACnC,WAAH,EAAR;AAAA,aAAzB;AACD;;;;;;;yBAlFUwC,c,EAAc,2H,EAAA,mI,EAAA,+H,EAAA,uH;AAAA,O;;;cAAdA,c;AAAc,kC;AAAA,iB;AAAA,gB;AAAA,81D;AAAA;AAAA;ACZ3B;;AAEE;;AAKE;AAAA,qBAAY,IAAAJ,MAAA,EAAZ;AAAoB,aAApB;;AAGA;;AACE;;AACE;;AACF;;AACA;;AACG;;AACD;;AAIG;;;;AAA8C;;AAEnD;;AACF;;AAIA;;AAWA;;AAUA;;AACE;;AAAyD;;AAAK;;AAC9D;;AAQA;;AAQA;;AAQA;;AAQA;;AAQF;;AAIA;;AACE;;AACE;;AACG;;AAAQ;;AAEX;;AAKE;;AACF;;AACF;;AAEA;;AAQA;;AAQA;;AAQA;;AAQF;;AAIA;;AACE;;AAME;;AACF;;AAEA;;AAIE;;AACE;;AACF;;AACA;;AACF;;AAEA;;;;AAGF;;AAEF;;AAEF;;AAGA;;;;;;AA1KI;;AAAA;;AAgBO;;AAAA;;AAOQ;;AAAA;;AAWA;;AAAA;;AAkBX;;AAAA;;AAGA;;AAAA,8FAA8B,yBAA9B,EAA8B,uGAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,uGAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,uGAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,uGAA9B;;AA+BA;;AAAA;;AAGA;;AAAA,8FAA8B,yBAA9B,EAA8B,0GAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,0GAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,0GAA9B;;AAgBA;;AAAA;;AAea;;AAAA;;;;;;;;;;wEDxJRI,c,EAAc;gBAL1B,uDAK0B;iBALhB;AACTH,oBAAQ,EAAE,WADD;AAETC,uBAAW,EAAE,wBAFJ;AAGTC,qBAAS,EAAE,CAAC,wBAAD;AAHF,W;AAKgB,U;;;;;;;;;;;;;;;;;;;;AEb3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAQaW,e;AACX,iCAAoBpD,WAApB,EAA8C;AAAA;;AAA1B,eAAAA,WAAA,GAAAA,WAAA;AAClB,eAAKA,WAAL,CAAiBqD,MAAjB;AACD;;;;iBAED,oBAAQ,CAAW;;;;;;;yBALRD,e,EAAe,mI;AAAA,O;;;cAAfA,e;AAAe,mC;AAAA,gB;AAAA,e;AAAA;AAAA;ACR5B;;AAAG;;AAAa;;;;;;;;wEDQHA,e,EAAe;gBAL3B,uDAK2B;iBALjB;AACTb,oBAAQ,EAAE,YADD;AAETC,uBAAW,EAAE,yBAFJ;AAGTC,qBAAS,EAAE,CAAC,yBAAD;AAHF,W;AAKiB,U;;;;;;;;;;;;;;AER5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOaa,a;AAIX,iCAAc;AAAA;;AAFd,eAAAC,KAAA,GAAc,IAAIC,IAAJ,EAAd;AAEiB;;;;iBAEjB,oBAAQ,CACP;;;;;;;yBAPUF,a;AAAa,O;;;cAAbA,a;AAAa,iC;AAAA,iB;AAAA,e;AAAA,2vC;AAAA;AAAA;ACP1B;;AAEE;;AAEE;;AAEE;;AAEE;;AACE;;AACF;;AAIA;;AACE;;AAAyB;;AACzB;;AACF;;AAEF;;AAIA;;AAGF;;AAIA;;AAGE;;AACE;;AACF;;AAIA;;AACE;;AAAiE;;AAAK;;AACtE;;AAAuE;;AAAK;;AAC5E;;AAAuE;;AAAU;;AACnF;;AAEF;;AAEF;;AAEF;;;;;;;;;wED1CaA,a,EAAa;gBALzB,uDAKyB;iBALf;AACTf,oBAAQ,EAAE,UADD;AAETC,uBAAW,EAAE,uBAFJ;AAGTC,qBAAS,EAAE,CAAC,uBAAD;AAHF,W;AAKe,U;;;;;;;;;;;;AEP1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACwBI;;AACE;;AAGE;;AAAwB;;AAA6B;;AACvD;;AACF;;;;;;AAoEE;;AACE;;AACF;;;;;;AAOJ;;AACE;;AAWE;;AACE;;AACE;;AAA+C;;AAAiB;;AAChE;;AACE;;AAAmC;;AACnC;;AAAa;;AACf;;AACA;;AAIE;;AACF;;AACF;;AACF;;AAEF;;AACF;;;;;;AASA;;AAGE;;AACE;;AACE;;AACF;;AACF;;AACF;;;;;;AAHM;;AAAA;;;;;;AALN;;;;;;;AACG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AD5IL,UAAKgB,WAAL;;AAAA,iBAAKA,WAAL,EAAgB;AACd;AACA;AACA;AACD,OAJD,EAAKA,WAAW,KAAXA,WAAW,MAAhB;;UAWaC,uB;AAQX,yCACU3D,EADV,EAEUC,WAFV,EAEkC;AAAA;;AADxB,eAAAD,EAAA,GAAAA,EAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AARV,eAAA2D,UAAA,GAA0BF,WAAW,CAACG,YAAtC;AACA,eAAAC,WAAA,GAAcJ,WAAd,CAOkC,CAJlC;;AACQ,eAAAvD,WAAA,GAA8B,EAA9B,CAG0B,CAHQ;;AAKxC,eAAKC,UAAL,GAAkB,KAAKH,WAAL,CAAiBG,UAAnC;AACD;;;;iBAED,oBAAQ;AACN,iBAAKG,QAAL;AACD,W,CAED;;;;eACA,eAAQ;AACN,mBAAO,KAAKwD,kBAAL,CAAwBtD,QAA/B;AACD;;;iBAED,oBAAW;AACT,iBAAKsD,kBAAL,GAA0B,KAAK/D,EAAL,CAAQU,KAAR,CAAc;AACtCM,mBAAK,EAAE,CACL,gBADK,EAEL,0DAAWJ,OAAX,CAAmB,CACjB,0DAAWC,QADM,EAEjB,0DAAWG,KAFM,EAGjB,0DAAWF,SAAX,CAAqB,CAArB,CAHiB,EAIjB,0DAAWC,SAAX,CAAqB,GAArB,CAJiB,CAAnB,CAFK;AAD+B,aAAd,CAA1B;AAWD;;;iBAED,kBAAS;AAAA;;AACP,iBAAK6C,UAAL,GAAkBF,WAAW,CAACG,YAA9B;AACA,gBAAMG,oBAAoB,GAAG,KAAK/D,WAAL,CAC1BgE,cAD0B,CACX,KAAKvC,CAAL,CAAOV,KAAP,CAAaa,KADF,EAE1BK,IAF0B,CAErB,8DAFqB,EAG1BC,SAH0B,CAGhB,UAACZ,MAAD,EAAqB;AAC9B,oBAAI,CAACqC,UAAL,GAAkBrC,MAAM,GAAGmC,WAAW,CAACQ,OAAf,GAAyBR,WAAW,CAACS,QAA7D;AACD,aAL0B,CAA7B;AAMA,iBAAKhE,WAAL,CAAiBkC,IAAjB,CAAsB2B,oBAAtB;AACD;;;;;;;yBA/CUL,uB,EAAuB,2H,EAAA,mI;AAAA,O;;;cAAvBA,uB;AAAuB,4C;AAAA,iB;AAAA,gB;AAAA,0wD;AAAA;AAAA;ACjBpC;;AAEE;;AAIE;AAAA,qBAAY,IAAApB,MAAA,EAAZ;AAAoB,aAApB;;AAOA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AAIA;;AAUA;;AACE;;AAYA;;AAQA;;AAQA;;AAQA;;AAQF;;AAGA;;AACE;;AAKE;;AACF;;AACA;;AAKE;;AACF;;AAEA;;;;AAGF;;AAEA;;AACF;;AAGA;;AA8BF;;AAEA;;;;;;AAtII;;AAAA,0GAAgC,SAAhC,EAAgC,qIAAhC;;AAmBe;;AAAA;;AAkBX;;AAAA;;AAMA;;AAAA,8FAA8B,yBAA9B,EAA8B,gHAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,gHAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,gHAA9B;;AAQA;;AAAA,8FAA8B,yBAA9B,EAA8B,gHAA9B;;AA0Ba;;AAAA;;AASJ;;AAAA;;;;;;;;;;wED1FJoB,uB,EAAuB;gBALnC,uDAKmC;iBALzB;AACTnB,oBAAQ,EAAE,qBADD;AAETC,uBAAW,EAAE,kCAFJ;AAGTC,qBAAS,EAAE,CAAC,kCAAD;AAHF,W;AAKyB,U;;;;;;;;;;;;;;;;AEjBpC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AASA,UAAM0B,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE,6DAFb;AAGEC,gBAAQ,EAAE,CACR;AACEF,cAAI,EAAE,EADR;AAEEG,oBAAU,EAAE,OAFd;AAGEC,mBAAS,EAAE;AAHb,SADQ,EAMR;AACEJ,cAAI,EAAE,OADR;AAEEC,mBAAS,EAAE,qEAFb;AAGEI,cAAI,EAAE;AAAC5B,qBAAS,EAAE6B,MAAM,CAACC,QAAP,CAAgBC;AAA5B;AAHR,SANQ,EAWR;AACER,cAAI,EAAE,cADR;AAEEC,mBAAS,EAAE;AAFb,SAXQ,EAeR;AACED,cAAI,EAAE,iBADR;AAEEC,mBAAS,EAAE;AAFb,SAfQ,EAmBR;AACED,cAAI,EAAE,QADR;AAEEC,mBAAS,EAAE;AAFb,SAnBQ,EAuBR;AAACD,cAAI,EAAE,EAAP;AAAWG,oBAAU,EAAE,OAAvB;AAAgCC,mBAAS,EAAE;AAA3C,SAvBQ,EAwBR;AAACJ,cAAI,EAAE,IAAP;AAAaG,oBAAU,EAAE,OAAzB;AAAkCC,mBAAS,EAAE;AAA7C,SAxBQ;AAHZ,OADqB,CAAvB;;UAqCaK,iB;;;;;cAAAA;;;;2BAAAA,iB;AAAiB,S;AAAA,kBAHnB,CAAE,6DAAaC,QAAb,CAAsBX,MAAtB,CAAF,CAGmB,EAFjB,4DAEiB;;;;4HAAjBU,iB,EAAiB;AAAA;AAAA,oBAFjB,4DAEiB;AAAA,S;AAFL,O;;;;;wEAEZA,iB,EAAiB;gBAJ7B,sDAI6B;iBAJpB;AACRhF,mBAAO,EAAE,CAAE,6DAAaiF,QAAb,CAAsBX,MAAtB,CAAF,CADD;AAERY,mBAAO,EAAE,CAAE,4DAAF;AAFD,W;AAIoB,U","file":"modules-auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { RegistrationComponent } from './registration/registration.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { LogoutComponent } from './logout/logout.component';\nimport { AuthComponent } from './auth.component';\nimport {TranslationModule} from '../i18n/translation.module';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegistrationComponent,\n    ForgotPasswordComponent,\n    LogoutComponent,\n    AuthComponent,\n  ],\n  imports: [\n    CommonModule,\n    TranslationModule,\n    AuthRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n  ]\n})\nexport class AuthModule {}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Subscription, Observable } from 'rxjs';\nimport { AuthService } from '../_services/auth.service';\nimport { Router } from '@angular/router';\nimport { ConfirmPasswordValidator } from './confirm-password.validator';\nimport { UserModel } from '../_models/user.model';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss'],\n})\nexport class RegistrationComponent implements OnInit, OnDestroy {\n  registrationForm: FormGroup;\n  hasError: boolean;\n  isLoading$: Observable<boolean>;\n\n  // private fields\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.isLoading$ = this.authService.isLoading$;\n    // redirect to home if already logged in\n    if (this.authService.currentUserValue) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.registrationForm.controls;\n  }\n\n  initForm() {\n    this.registrationForm = this.fb.group(\n      {\n        fullname: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(100),\n          ]),\n        ],\n        email: [\n          'qwe@qwe.qwe',\n          Validators.compose([\n            Validators.required,\n            Validators.email,\n            Validators.minLength(3),\n            Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\n          ]),\n        ],\n        password: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(100),\n          ]),\n        ],\n        cPassword: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(100),\n          ]),\n        ],\n        agree: [false, Validators.compose([Validators.required])],\n      },\n      {\n        validator: ConfirmPasswordValidator.MatchPassword,\n      }\n    );\n  }\n\n  submit() {\n    this.hasError = false;\n    const result = {};\n    Object.keys(this.f).forEach(key => {\n      result[key] = this.f[key].value;\n    });\n    const newUser = new UserModel();\n    newUser.setUser(result);\n    const registrationSubscr = this.authService\n      .registration(newUser)\n      .pipe(first())\n      .subscribe((user: UserModel) => {\n        if (user) {\n          this.router.navigate(['/']);\n        } else {\n          this.hasError = true;\n        }\n      });\n    this.unsubscribe.push(registrationSubscr);\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe.forEach((sb) => sb.unsubscribe());\n  }\n}\n","<!--begin::Signup-->\n<div class=\"login-form login-signup\">\n  <!--begin::Form-->\n  <form\n    class=\"form\"\n    novalidate=\"novalidate\"\n    id=\"kt_login_signup_form\"\n    [formGroup]=\"registrationForm\"\n    (ngSubmit)=\"submit()\"\n  >\n    <!--begin::Title-->\n    <div class=\"pb-13 pt-lg-0 pt-5\">\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\n        Sign Up\n      </h3>\n      <p class=\"text-muted font-weight-bold font-size-h4\">\n        Enter your details to create your account\n      </p>\n    </div>\n    <!--end::Title-->\n\n    <!-- begin::Alert error-->\n    <ng-container *ngIf=\"hasError\">\n      <div\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\n      >\n        <div class=\"alert-text\">The registration details are incorrect</div>\n      </div>\n    </ng-container>\n    <!-- end::Alert error-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Fullname</label>\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n        type=\"text\"\n        name=\"fullname\"\n        formControlName=\"fullname\"\n        placeholder=\"Fullname\"\n        autocomplete=\"off\"\n        [ngClass]=\"{\n          'is-invalid': registrationForm.controls['fullname'].invalid\n        }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Fullname is required',\n          control: registrationForm.controls['fullname']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'Fullname should have at least 3 symbols',\n          control: registrationForm.controls['fullname']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Fullname should have maximum 100 symbols',\n          control: registrationForm.controls['fullname']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Email</label>\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n        type=\"email\"\n        placeholder=\"Email\"\n        name=\"email\"\n        formControlName=\"email\"\n        autocomplete=\"off\"\n        [ngClass]=\"{ 'is-invalid': registrationForm.controls['email'].invalid }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Email is required',\n          control: registrationForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'email',\n          message: 'Email is invalid',\n          control: registrationForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'Email should have at least 3 symbols',\n          control: registrationForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Email should have maximum 360 symbols',\n          control: registrationForm.controls['email']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\n        >Password</label\n      >\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n        type=\"password\"\n        placeholder=\"Password\"\n        name=\"password\"\n        formControlName=\"password\"\n        autocomplete=\"off\"\n        [ngClass]=\"{\n          'is-invalid': registrationForm.controls['password'].invalid\n        }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Password is required',\n          control: registrationForm.controls['password']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'Password should have at least 3 symbols',\n          control: registrationForm.controls['password']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Password should have maximum 100 symbols',\n          control: registrationForm.controls['password']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\n        >Confirm Password</label\n      >\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n        type=\"password\"\n        placeholder=\"Confirm password\"\n        name=\"cPassword\"\n        autocomplete=\"off\"\n        formControlName=\"cPassword\"\n        [ngClass]=\"{\n          'is-invalid': registrationForm.controls['cPassword'].invalid\n        }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Confirm Password is required',\n          control: registrationForm.controls['cPassword']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'Confirm Password should have at least 3 symbols',\n          control: registrationForm.controls['cPassword']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Confirm Password should have maximum 100 symbols',\n          control: registrationForm.controls['cPassword']\n        }\"\n      ></ng-container>\n      <ng-container\n        *ngIf=\"\n          registrationForm.controls['cPassword'].errors &&\n          registrationForm.controls['cPassword'].errors.ConfirmPassword\n        \"\n      >\n        <div class=\"fv-plugins-message-container\">\n          <div class=\"fv-help-block\">\n            'Passsword' and 'Confirm Password' didn't match.\n          </div>\n        </div>\n      </ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"checkbox mb-0\">\n        <input type=\"checkbox\" formControlName=\"agree\" name=\"agree\" />&nbsp;I\n        Agree the&nbsp;<a\n          href=\"https://keenthemes.com/metronic/?page=faq\"\n          target=\"_blank\"\n          >terms and conditions</a\n        >.&nbsp;\n        <span></span>\n      </label>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group d-flex flex-wrap pb-lg-0 pb-3\">\n      <button\n        type=\"submit\"\n        id=\"kt_login_signup_submit\"\n        [disabled]=\"\n          registrationForm.invalid || !registrationForm.controls['agree'].value\n        \"\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-4\"\n      >\n        Submit\n      </button>\n      <a\n        routerLink=\"/auth/login\"\n        type=\"button\"\n        id=\"kt_login_signup_cancel\"\n        class=\"btn btn-light-primary font-weight-bolder font-size-h6 px-8 py-4 my-3\"\n      >\n        Cancel\n      </a>\n\n      <ng-container *ngIf=\"isLoading$ | async\">\n        <span class=\"spinner spinner-primary ml-5\"></span>\n      </ng-container>\n    </div>\n    <!--end::Form group-->\n  </form>\n  <!--end::Form-->\n</div>\n<!--end::Signup-->\n\n<ng-template\n  #formError\n  let-control=\"control\"\n  let-message=\"message\"\n  let-validation=\"validation\"\n>\n  <ng-container\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\n  >\n    <div class=\"fv-plugins-message-container\">\n      <div class=\"fv-help-block\">\n        {{ message }}\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n","import { Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription, Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { UserModel } from '../_models/user.model';\nimport { AuthService } from '../_services/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  // KeenThemes mock, change it to:\n  // defaultAuth = {\n  //   email: '',\n  //   password: '',\n  // };\n  defaultAuth: any = {\n    email: 'admin@demo.com',\n    password: 'demo',\n  };\n  loginForm: FormGroup;\n  hasError: boolean;\n  returnUrl: string;\n  isLoading$: Observable<boolean>;\n\n  // private fields\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n    this.isLoading$ = this.authService.isLoading$;\n    // redirect to home if already logged in\n    if (this.authService.currentUserValue) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n    // get return url from route parameters or default to '/'\n    this.returnUrl =\n        this.route.snapshot.queryParams['returnUrl'.toString()] || '/';\n    }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  initForm() {\n    this.loginForm = this.fb.group({\n      email: [\n        this.defaultAuth.email,\n        Validators.compose([\n          Validators.required,\n          Validators.email,\n          Validators.minLength(3),\n          Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\n        ]),\n      ],\n      password: [\n        this.defaultAuth.password,\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(100),\n        ]),\n      ],\n    });\n  }\n\n  submit() {\n    this.hasError = false;\n    const loginSubscr = this.authService\n      .login(this.f.email.value, this.f.password.value)\n      .pipe(first())\n      .subscribe((user: UserModel) => {\n        if (user) {\n          this.router.navigate([this.  returnUrl]);\n        } else {\n          this.hasError = true;\n        }\n      });\n    this.unsubscribe.push(loginSubscr);\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe.forEach((sb) => sb.unsubscribe());\n  }\n}\n","<!--begin::Signin-->\n<div class=\"login-form login-signin\">\n  <!--begin::Form-->\n  <form\n    class=\"form\"\n    [formGroup]=\"loginForm\"\n    novalidate=\"novalidate\"\n    id=\"kt_login_signin_form\"\n    (ngSubmit)=\"submit()\"\n  >\n    <!--begin::Title-->\n    <div class=\"pb-13 pt-lg-0 pt-5\">\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\n        Welcome to Metronic\n      </h3>\n      <span class=\"text-muted font-weight-bold font-size-h4\"\n        >New Here?\n        <a\n          routerLink=\"/auth/registration\"\n          id=\"kt_login_signup\"\n          class=\"text-primary font-weight-bolder\"\n          >{{ \"AUTH.GENERAL.SIGNUP_BUTTON\" | translate }}</a\n        >\n      </span>\n    </div>\n    <!--end::Title-->\n\n    <!-- begin::Alert info-->\n    <ng-container *ngIf=\"!hasError\">\n      <div class=\"mb-10 alert alert-custom alert-light-info alert-dismissible\">\n        <div class=\"alert-text\">\n          Use account <strong>{{ defaultAuth.email }}</strong> and password\n          <strong>{{ defaultAuth.password }}</strong> to continue.\n        </div>\n      </div>\n    </ng-container>\n    <!-- end::Alert info-->\n\n    <!-- begin::Alert error-->\n    <ng-container *ngIf=\"hasError\">\n      <div\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\n      >\n        <div class=\"alert-text\">The login details are incorrect</div>\n      </div>\n    </ng-container>\n    <!-- end::Alert error-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Email</label>\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg\"\n        type=\"email\"\n        name=\"email\"\n        formControlName=\"email\"\n        autocomplete=\"off\"\n        [ngClass]=\"{ 'is-invalid': loginForm.controls['email'].invalid }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Email is required',\n          control: loginForm.controls['email']\n        }\"\n      ></ng-container>      \n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'email',\n          message: 'Email is invalid',\n          control: loginForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minLength',\n          message: 'Email should have at least 3 symbols',\n          control: loginForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Email should have maximum 360 symbols',\n          control: loginForm.controls['email']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <div class=\"d-flex justify-content-between mt-n5\">\n        <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\n          >Password</label\n        >\n        <a\n          routerLink=\"/auth/forgot-password\"\n          class=\"text-primary font-size-h6 font-weight-bolder text-hover-primary pt-5\"\n          id=\"kt_login_forgot\"\n        >\n          Forgot Password ?\n        </a>\n      </div>\n\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg\"\n        type=\"password\"\n        name=\"password\"\n        autocomplete=\"off\"\n        formControlName=\"password\"\n        [ngClass]=\"{ 'is-invalid': loginForm.controls['password'].invalid }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Password is required',\n          control: loginForm.controls['password']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'Password should have at least 3 symbols',\n          control: loginForm.controls['password']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Password should have maximum 100 symbols',\n          control: loginForm.controls['password']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Action-->\n    <div class=\"pb-lg-0 pb-5\">\n      <button\n        type=\"submit\"\n        id=\"kt_login_signin_submit\"\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-3\"\n        [disabled]=\"loginForm.invalid\"\n      >\n        Sign In\n      </button>\n\n      <button\n        type=\"button\"\n        class=\"btn btn-light-primary font-weight-bolder px-8 py-4 my-3 font-size-lg\"\n      >\n        <span class=\"svg-icon svg-icon-md\">\n          <img src=\"./assets/media/svg/social-icons/google.svg\" />\n        </span>\n        Sign in with Google\n      </button>\n\n      <ng-container *ngIf=\"isLoading$ | async\">\n        <span class=\"spinner spinner-primary ml-5\"></span>\n      </ng-container>\n    </div>\n    <!--end::Action-->\n  </form>\n  <!--end::Form-->\n</div>\n<!--end::Signin-->\n\n<ng-template\n  #formError\n  let-control=\"control\"\n  let-message=\"message\"\n  let-validation=\"validation\"\n>\n  <ng-container\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\n  >\n    <div class=\"fv-plugins-message-container\">\n      <div class=\"fv-help-block\">\n        {{ message }}\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\n\n@Component({\n  selector: 'app-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.scss'],\n})\nexport class LogoutComponent implements OnInit {\n  constructor(private authService: AuthService) {\n    this.authService.logout();\n  }\n\n  ngOnInit(): void {}\n}\n","<p>logout works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit {\n\n  today: Date = new Date();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"d-flex flex-column flex-root h-100\" id=\"kt_login_wrapper\">\n  <!--begin::Login-->\n  <div class=\"login login-1 login-signin-on d-flex flex-column flex-lg-row flex-column-fluid bg-white\" id=\"kt_login\">\n    <!--begin::Aside-->\n    <div class=\"login-aside d-flex flex-column flex-row-auto\" style=\"background-color: #F2C98A;\">\n      <!--begin::Aside Top-->\n      <div class=\"d-flex flex-column-auto flex-column pt-lg-40 pt-15\">\n        <!--begin::Aside header-->\n        <a href=\"#\" class=\"text-center mb-10\">\n          <img src=\"./assets/media/logos/logo-letter-1.png\" class=\"max-h-70px\" alt=\"\" />\n        </a>\n        <!--end::Aside header-->\n\n        <!--begin::Aside title-->\n        <h3 class=\"font-weight-bolder text-center font-size-h4 font-size-h1-lg\" style=\"color: #986923;\">\n          Discover Amazing Metronic<br />\n          with great build tools\n        </h3>\n        <!--end::Aside title-->\n      </div>\n      <!--end::Aside Top-->\n\n      <!--begin::Aside Bottom-->\n      <div class=\"aside-img d-flex flex-row-fluid bgi-no-repeat bgi-position-y-bottom bgi-position-x-center\"\n        style=\"background-image: url('./assets/media/svg/illustrations/login-visual-1.svg')\"></div>\n      <!--end::Aside Bottom-->\n    </div>\n    <!--begin::Aside-->\n\n    <!--begin::Content-->\n    <div\n      class=\"login-content flex-row-fluid d-flex flex-column justify-content-center position-relative overflow-hidden p-7 mx-auto\">\n      <!--begin::Content body-->\n      <div class=\"d-flex flex-column-fluid flex-center\">\n        <router-outlet></router-outlet>\n      </div>\n      <!--end::Content body-->\n\n      <!--begin::Content footer-->\n      <div class=\"d-flex justify-content-lg-start justify-content-center align-items-end py-7 py-lg-0\">\n        <a href=\"#\" class=\"text-primary font-weight-bolder font-size-h5\">Terms</a>\n        <a href=\"#\" class=\"text-primary ml-10 font-weight-bolder font-size-h5\">Plans</a>\n        <a href=\"#\" class=\"text-primary ml-10 font-weight-bolder font-size-h5\">Contact Us</a>\n      </div>\n      <!--end::Content footer-->\n    </div>\n    <!--end::Content-->\n  </div>\n  <!--end::Login-->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport { AuthService } from '../_services/auth.service';\nimport { first } from 'rxjs/operators';\n\nenum ErrorStates {\n  NotSubmitted,\n  HasError,\n  NoError,\n}\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n  errorState: ErrorStates = ErrorStates.NotSubmitted;\n  errorStates = ErrorStates;\n  isLoading$: Observable<boolean>;\n\n  // private fields\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService\n  ) {\n    this.isLoading$ = this.authService.isLoading$;\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.forgotPasswordForm.controls;\n  }\n\n  initForm() {\n    this.forgotPasswordForm = this.fb.group({\n      email: [\n        'admin@demo.com',\n        Validators.compose([\n          Validators.required,\n          Validators.email,\n          Validators.minLength(3),\n          Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\n        ]),\n      ],\n    });\n  }\n\n  submit() {\n    this.errorState = ErrorStates.NotSubmitted;\n    const forgotPasswordSubscr = this.authService\n      .forgotPassword(this.f.email.value)\n      .pipe(first())\n      .subscribe((result: boolean) => {\n        this.errorState = result ? ErrorStates.NoError : ErrorStates.HasError;\n      });\n    this.unsubscribe.push(forgotPasswordSubscr);\n  }\n}\n","<div class=\"login-form login-forgot\">\n  <!--begin::Form-->\n  <form\n    class=\"form fv-plugins-bootstrap fv-plugins-framework\"\n    novalidate=\"novalidate\"\n    [formGroup]=\"forgotPasswordForm\"\n    (ngSubmit)=\"submit()\"\n    id=\"kt_login_forgot_form\"\n    [ngStyle]=\"{\n      display: errorState === errorStates.NoError ? 'none' : 'block'\n    }\"\n  >\n    <!--begin::Title-->\n    <div class=\"pb-13 pt-lg-0 pt-5\">\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\n        Forgotten Password ?\n      </h3>\n      <p class=\"text-muted font-weight-bold font-size-h4\">\n        Enter your email to reset your password\n      </p>\n    </div>\n    <!--end::Title-->\n\n    <!-- begin::Alert error-->\n    <ng-container *ngIf=\"errorState === errorStates.HasError\">\n      <div\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\n      >\n        <div class=\"alert-text\">The email detail is incorrect</div>\n      </div>\n    </ng-container>\n    <!-- end::Alert error-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group fv-plugins-icon-container has-danger\">\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n        type=\"email\"\n        formControlName=\"email\"\n        placeholder=\"Email\"\n        name=\"email\"\n        autocomplete=\"off\"\n        [ngClass]=\"{\n          'is-invalid': forgotPasswordForm.controls['email'].invalid\n        }\"\n      />\n\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Email is required',\n          control: forgotPasswordForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'email',\n          message: 'Email is invalid',\n          control: forgotPasswordForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minLength',\n          message: 'Email should have at least 3 symbols',\n          control: forgotPasswordForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Email should have maximum 360 symbols',\n          control: forgotPasswordForm.controls['email']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n    <!--begin::Form group-->\n    <div class=\"form-group d-flex flex-wrap pb-lg-0\">\n      <button\n        type=\"submit\"\n        id=\"kt_login_forgot_submit\"\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-4\"\n      >\n        Submit\n      </button>\n      <a\n        routerLink=\"/auth/login\"\n        id=\"kt_login_forgot_cancel\"\n        class=\"btn btn-light-primary font-weight-bolder font-size-h6 px-8 py-4 my-3\"\n      >\n        Cancel\n      </a>\n\n      <ng-container *ngIf=\"isLoading$ | async\">\n        <span class=\"spinner spinner-primary ml-5\"></span>\n      </ng-container>\n    </div>\n    <!--end::Form group-->\n    <div></div>\n  </form>\n  <!--end::Form-->\n\n  <ng-container *ngIf=\"errorState === errorStates.NoError\">\n    <div\n      class=\"card card-custom bgi-no-repeat gutter-b\"\n      style=\"\n        height: 175px;\n        background-color: #4ab58e;\n        background-position: calc(100% + 1rem) bottom;\n        background-size: 25% auto;\n        background-image: url(assets/media/svg/humans/custom-1.svg);\n      \"\n    >\n      <!--begin::Body-->\n      <div class=\"card-body d-flex align-items-center\">\n        <div class=\"py-2\">\n          <h3 class=\"text-white font-weight-bolder mb-3\">Email is correct!</h3>\n          <p class=\"text-white font-size-lg\">\n            Message with 'recovery' instruction<br />\n            has been sent<br />\n          </p>\n          <a\n            routerLink=\"/auth/login\"\n            class=\"swal2-confirm btn font-weight-bold btn-light-primary\"\n          >\n            Ok, got it!\n          </a>\n        </div>\n      </div>\n      <!--end::Body-->\n    </div>\n  </ng-container>\n</div>\n\n<ng-template\n  #formError\n  let-control=\"control\"\n  let-message=\"message\"\n  let-validation=\"validation\"\n>\n  <ng-container\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\n  >\n    <div class=\"fv-plugins-message-container\">\n      <div class=\"fv-help-block\">\n        {{ message }}\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {AuthComponent} from './auth.component';\nimport {LoginComponent} from './login/login.component';\nimport {RegistrationComponent} from './registration/registration.component';\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\nimport {LogoutComponent} from './logout/logout.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: 'login',\n        pathMatch: 'full'\n      },\n      {\n        path: 'login',\n        component: LoginComponent,\n        data: {returnUrl: window.location.pathname}\n      },\n      {\n        path: 'registration',\n        component: RegistrationComponent\n      },\n      {\n        path: 'forgot-password',\n        component: ForgotPasswordComponent\n      },\n      {\n        path: 'logout',\n        component: LogoutComponent\n      },\n      {path: '', redirectTo: 'login', pathMatch: 'full'},\n      {path: '**', redirectTo: 'login', pathMatch: 'full'},\n    ]\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forChild(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AuthRoutingModule {}\n"]}