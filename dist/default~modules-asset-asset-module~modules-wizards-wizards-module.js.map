{"version":3,"sources":["./src/assets/js/components/wizard.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACa;;AAEmB;;AAEhC;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,4CAAM;AACxB,eAAe,4CAAM;;AAErB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,4CAAM;AACtB,sBAAsB,4CAAM;AAC5B,aAAa;AACb;AACA;;AAEA;AACA;;AAEA,gBAAgB,4CAAM;AACtB;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,4CAAM,cAAc;;AAE9C;AACA,wBAAwB,4CAAM;;AAE9B,0BAA0B,4CAAM;AAChC,0BAA0B,4CAAM;AAChC,4BAA4B,4CAAM;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4CAAM;AACtB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,gBAAgB,4CAAM;AACtB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,gBAAgB,4CAAM;AACtB;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA,gBAAgB,4CAAM;AACtB,gCAAgC,4CAAM;;AAEtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA,YAAY,4CAAM;;AAElB;AACA,wBAAwB,4CAAM;;AAE9B;AACA,mDAAmD,SAAS;AAC5D;AACA,wBAAwB,4CAAM;AAC9B,qBAAqB;AACrB;AACA,4BAA4B,4CAAM;AAClC,yBAAyB;AACzB,4BAA4B,4CAAM;AAClC;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,4CAAM;AAClC;AACA,uDAAuD,SAAS;AAChE;AACA,wBAAwB,4CAAM;AAC9B,qBAAqB;AACrB,wBAAwB,4CAAM;AAC9B;AACA;AACA;;AAEA;AACA,+BAA+B,4CAAM;AACrC;AACA,0DAA0D,SAAS;AACnE;AACA,wBAAwB,4CAAM;AAC9B,qBAAqB;AACrB,wBAAwB,4CAAM;AAC9B;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEbjC;AACA;;AAEe,uEAAQ,E","file":"default~modules-asset-asset-module~modules-wizards-wizards-module.js","sourcesContent":["/* eslint-disable */\n\"use strict\";\n\nimport { KTUtil } from \"./util\";\r\n\r\n// Component Definition\r\nvar KTWizard = function(elementId, options) {\r\n    // Main object\r\n    var the = this;\r\n    var init = false;\r\n\r\n    // Get element object\r\n    var element = KTUtil.getById(elementId);\r\n    var body = KTUtil.getBody();\r\n\r\n    if (!element) {\r\n        return;\r\n    }\r\n\r\n    // Default options\r\n    var defaultOptions = {\r\n        startStep: 1,\r\n        clickableSteps: false, // to make steps clickable this set value true and add data-wizard-clickable=\"true\" in HTML for class=\"wizard\" element\r\n        navigation: true\r\n    };\r\n\r\n    ////////////////////////////\r\n    // ** Private Methods  ** //\r\n    ////////////////////////////\r\n\r\n    var Plugin = {\r\n        /**\r\n         * Construct\r\n         */\r\n\r\n        construct: function(options) {\r\n            if (KTUtil.data(element).has('wizard')) {\r\n                the = KTUtil.data(element).get('wizard');\r\n            } else {\r\n                // reset menu\r\n                Plugin.init(options);\r\n\r\n                // build menu\r\n                Plugin.build();\r\n\r\n                KTUtil.data(element).set('wizard', the);\r\n            }\r\n\r\n            return the;\r\n        },\r\n\r\n        /**\r\n         * Init wizard\r\n         */\r\n        init: function(options) {\r\n            the.element = element;\r\n            the.events = [];\r\n\r\n            // merge default and user defined options\r\n            the.options = KTUtil.deepExtend({}, defaultOptions, options);\r\n\r\n            // Elements\r\n            the.steps = KTUtil.findAll(element, '[data-wizard-type=\"step\"]');\r\n\r\n            the.btnNext = KTUtil.find(element, '[data-wizard-type=\"action-next\"]');\r\n            the.btnPrev = KTUtil.find(element, '[data-wizard-type=\"action-prev\"]');\r\n            the.btnSubmit = KTUtil.find(element, '[data-wizard-type=\"action-submit\"]');\r\n\r\n            // Variables\r\n            the.events = [];\r\n            the.lastStep = 0;\r\n            the.currentStep = 1;\r\n            the.newStep = 0;\r\n            the.stopped = false;\r\n            the.totalSteps = the.steps.length;\r\n\r\n            // Init current step\r\n            if (the.options.startStep > 1) {\r\n                Plugin.goTo(the.options.startStep);\r\n            }\r\n\r\n            // Init UI\r\n            Plugin.updateUI();\r\n        },\r\n\r\n        /**\r\n         * Build Form Wizard\r\n         */\r\n        build: function() {\r\n            if (the.options.navigation) {\r\n                // Next button event handler\r\n                KTUtil.addEvent(the.btnNext, 'click', function(e) {\r\n                    e.preventDefault();\r\n\r\n                    // Set new step number\r\n                    Plugin.setNewStep(Plugin.getNextStep());\r\n\r\n                    // Trigger change event\r\n                    if (Plugin.eventTrigger('change') !== false) {\r\n                        Plugin.goTo(Plugin.getNextStep());\r\n                    }\r\n                });\r\n\r\n                // Prev button event handler\r\n                KTUtil.addEvent(the.btnPrev, 'click', function(e) {\r\n                    e.preventDefault();\r\n\r\n                    // Set new step number\r\n                    Plugin.setNewStep(Plugin.getPrevStep());\r\n\r\n                    // Trigger change event\r\n                    if (Plugin.eventTrigger('change') !== false) {\r\n                        Plugin.goTo(Plugin.getPrevStep());\r\n                    }\r\n                });\r\n\r\n                // Submit button event handler\r\n                KTUtil.addEvent(the.btnSubmit, 'click', function(e) {\r\n                    e.preventDefault();\r\n\r\n                    Plugin.eventTrigger('submit');\r\n                });\r\n            }\r\n\r\n            if (the.options.clickableSteps === true) {\r\n                KTUtil.on(element, '[data-wizard-type=\"step\"]', 'click', function() {\r\n                    var index = KTUtil.index(this) + 1;\r\n\r\n                    if (index !== the.currentStep) {\r\n                        Plugin.setNewStep(index);\r\n\r\n                        // Trigger change event\r\n                        if (Plugin.eventTrigger('change') !== false) {\r\n                            Plugin.goTo(index);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handles wizard click wizard\r\n         */\r\n        goTo: function(number) {\r\n            // Skip if stopped\r\n            if (the.stopped === true) {\r\n                the.stopped = false;\r\n                return;\r\n            }\r\n\r\n            // Skip if this step is already shown\r\n            if (number === the.currentStep || number > the.totalSteps || number < 0) {\r\n                return;\r\n            }\r\n\r\n            // Validate step number\r\n            number = parseInt(number);\r\n\r\n            // Set current step\r\n            the.lastStep = the.currentStep;\r\n            the.currentStep = number;\r\n            the.newStep = 0;\r\n\r\n            Plugin.updateUI();\r\n\r\n            Plugin.eventTrigger('changed');\r\n\r\n            return the;\r\n        },\r\n\r\n        /**\r\n         * Stop wizard\r\n         */\r\n        stop: function() {\r\n            the.stopped = true;\r\n        },\r\n\r\n        /**\r\n         * Resume wizard\r\n         */\r\n        resume: function() {\r\n            the.stopped = false;\r\n        },\r\n\r\n        /**\r\n         * Check last step\r\n         */\r\n        isLastStep: function() {\r\n            return the.currentStep === the.totalSteps;\r\n        },\r\n\r\n        /**\r\n         * Check first step\r\n         */\r\n        isFirstStep: function() {\r\n            return the.currentStep === 1;\r\n        },\r\n\r\n        /**\r\n         * Check between step\r\n         */\r\n        isBetweenStep: function() {\r\n            return Plugin.isLastStep() === false && Plugin.isFirstStep() === false;\r\n        },\r\n\r\n        /**\r\n         * Update wizard UI after step change\r\n         */\r\n        updateUI: function() {\r\n            var stepType = '';\r\n            var index = the.currentStep - 1;\r\n\r\n            if (Plugin.isLastStep()) {\r\n                stepType = 'last';\r\n            } else if (Plugin.isFirstStep()) {\r\n                stepType = 'first';\r\n            } else {\r\n                stepType = 'between';\r\n            }\r\n\r\n            KTUtil.attr(the.element, 'data-wizard-state', stepType);\r\n\r\n            // Steps\r\n            var steps = KTUtil.findAll(the.element, '[data-wizard-type=\"step\"]');\r\n\r\n            if (steps && steps.length > 0) {\r\n                for (var i = 0, len = steps.length; i < len; i++) {\r\n                    if (i == index) {\r\n                        KTUtil.attr(steps[i], 'data-wizard-state', 'current');\r\n                    } else {\r\n                        if (i < index) {\r\n                            KTUtil.attr(steps[i], 'data-wizard-state', 'done');\r\n                        } else {\r\n                            KTUtil.attr(steps[i], 'data-wizard-state', 'pending');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Steps Info\r\n            var stepsInfo = KTUtil.findAll(the.element, '[data-wizard-type=\"step-info\"]');\r\n            if (stepsInfo &&stepsInfo.length > 0) {\r\n                for (var i = 0, len = stepsInfo.length; i < len; i++) {\r\n                    if (i == index) {\r\n                        KTUtil.attr(stepsInfo[i], 'data-wizard-state', 'current');\r\n                    } else {\r\n                        KTUtil.removeAttr(stepsInfo[i], 'data-wizard-state');\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Steps Content\r\n            var stepsContent = KTUtil.findAll(the.element, '[data-wizard-type=\"step-content\"]');\r\n            if (stepsContent&& stepsContent.length > 0) {\r\n                for (var i = 0, len = stepsContent.length; i < len; i++) {\r\n                    if (i == index) {\r\n                        KTUtil.attr(stepsContent[i], 'data-wizard-state', 'current');\r\n                    } else {\r\n                        KTUtil.removeAttr(stepsContent[i], 'data-wizard-state');\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get next step number\r\n         */\r\n        getNextStep: function() {\r\n            if (the.totalSteps >= (the.currentStep + 1)) {\r\n                return the.currentStep + 1;\r\n            } else {\r\n                return the.totalSteps;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get prev step number\r\n         */\r\n        getPrevStep: function() {\r\n            if ((the.currentStep - 1) >= 1) {\r\n                return the.currentStep - 1;\r\n            } else {\r\n                return 1;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get new step number\r\n         */\r\n        getNewStep: function() {\r\n            return the.newStep;\r\n        },\r\n\r\n        /**\r\n         * Set new step\r\n         */\r\n        setNewStep: function(step) {\r\n            the.newStep = step;\r\n        },\r\n\r\n        /**\r\n         * Trigger events\r\n         */\r\n        eventTrigger: function(name, nested) {\r\n            //KTUtil.triggerCustomEvent(name);\r\n            for (var i = 0; i < the.events.length; i++) {\r\n                var event = the.events[i];\r\n                if (event.name == name) {\r\n                    if (event.one == true) {\r\n                        if (event.fired == false) {\r\n                            the.events[i].fired = true;\r\n                            return event.handler.call(this, the);\r\n                        }\r\n                    } else {\r\n                        return event.handler.call(this, the);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        addEvent: function(name, handler, one) {\r\n            the.events.push({\r\n                name: name,\r\n                handler: handler,\r\n                one: one,\r\n                fired: false\r\n            });\r\n\r\n            return the;\r\n        }\r\n    };\r\n\r\n    //////////////////////////\r\n    // ** Public Methods ** //\r\n    //////////////////////////\r\n\r\n    /**\r\n     * Set default options\r\n     */\r\n\r\n    the.setDefaults = function(options) {\r\n        defaultOptions = options;\r\n    };\r\n\r\n    /**\r\n     * Go to the next step\r\n     */\r\n    the.goNext = function() {\r\n        return Plugin.goTo(Plugin.getNextStep());\r\n    };\r\n\r\n    /**\r\n     * Go to the prev step\r\n     */\r\n    the.goPrev = function() {\r\n        return Plugin.goTo(Plugin.getPrevStep());\r\n    };\r\n\r\n    /**\r\n     * Go to the last step\r\n     */\r\n    the.goLast = function() {\r\n        return Plugin.goTo(Plugin.getLastStep());\r\n    };\r\n\r\n    /**\r\n     * Go to the first step\r\n     */\r\n    the.goFirst = function() {\r\n        return Plugin.goTo(Plugin.getFirstStep());\r\n    };\r\n\r\n    /**\r\n     * Go to a step\r\n     */\r\n    the.goTo = function(number) {\r\n        return Plugin.goTo(number);\r\n    };\r\n\r\n    /**\r\n     * Stop wizard\r\n     */\r\n    the.stop = function() {\r\n        return Plugin.stop();\r\n    };\r\n\r\n    /**\r\n     * Resume wizard\r\n     */\r\n    the.resume = function() {\r\n        return Plugin.resume();\r\n    };\r\n\r\n    /**\r\n     * Get current step number\r\n     */\r\n    the.getStep = function() {\r\n        return the.currentStep;\r\n    };\r\n\r\n    /**\r\n     * Get new step number\r\n     */\r\n    the.getNewStep = function() {\r\n        return Plugin.getNewStep();\r\n    };\r\n\r\n    /**\r\n     * Set new step number\r\n     */\r\n    the.setNewStep = function(number) {\r\n        Plugin.setNewStep(number);\r\n    };\r\n\r\n    /**\r\n     * Check last step\r\n     */\r\n    the.isLastStep = function() {\r\n        return Plugin.isLastStep();\r\n    };\r\n\r\n    /**\r\n     * Check first step\r\n     */\r\n    the.isFirstStep = function() {\r\n        return Plugin.isFirstStep();\r\n    };\r\n\r\n    /**\r\n     * Attach event(\"change\", \"changed\", \"submit\")\r\n     */\r\n    the.on = function(name, handler) {\r\n        return Plugin.addEvent(name, handler);\r\n    };\r\n\r\n    /**\r\n     * Attach event that will be fired once\r\n     */\r\n    the.one = function(name, handler) {\r\n        return Plugin.addEvent(name, handler, true);\r\n    };\r\n\r\n    // Construct plugin\r\n    Plugin.construct.apply(the, [options]);\r\n\r\n    return the;\r\n};\r\n\r\n// webpack support\r\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\r\n    // module.exports = KTWizard;\r\n}\r\n\nexport default KTWizard;"],"sourceRoot":"webpack:///"}