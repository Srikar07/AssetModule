{"version":3,"sources":["./src/assets/js/components/wizard.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACa;;AAEmB;;AAEhC;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,4CAAM;AACxB,eAAe,4CAAM;;AAErB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,4CAAM;AACtB,sBAAsB,4CAAM;AAC5B,aAAa;AACb;AACA;;AAEA;AACA;;AAEA,gBAAgB,4CAAM;AACtB;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,4CAAM,cAAc;;AAE9C;AACA,wBAAwB,4CAAM;;AAE9B,0BAA0B,4CAAM;AAChC,0BAA0B,4CAAM;AAChC,4BAA4B,4CAAM;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4CAAM;AACtB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,gBAAgB,4CAAM;AACtB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,gBAAgB,4CAAM;AACtB;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA,gBAAgB,4CAAM;AACtB,gCAAgC,4CAAM;;AAEtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA,YAAY,4CAAM;;AAElB;AACA,wBAAwB,4CAAM;;AAE9B;AACA,mDAAmD,SAAS;AAC5D;AACA,wBAAwB,4CAAM;AAC9B,qBAAqB;AACrB;AACA,4BAA4B,4CAAM;AAClC,yBAAyB;AACzB,4BAA4B,4CAAM;AAClC;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,4CAAM;AAClC;AACA,uDAAuD,SAAS;AAChE;AACA,wBAAwB,4CAAM;AAC9B,qBAAqB;AACrB,wBAAwB,4CAAM;AAC9B;AACA;AACA;;AAEA;AACA,+BAA+B,4CAAM;AACrC;AACA,0DAA0D,SAAS;AACnE;AACA,wBAAwB,4CAAM;AAC9B,qBAAqB;AACrB,wBAAwB,4CAAM;AAC9B;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,IAAI,KAA6B;AACjC;AACA;;AAEe,uEAAQ,E","file":"default~modules-asset-asset-module~modules-wizards-wizards-module-es2015.js","sourcesContent":["/* eslint-disable */\n\"use strict\";\n\nimport { KTUtil } from \"./util\";\n\n// Component Definition\nvar KTWizard = function(elementId, options) {\n    // Main object\n    var the = this;\n    var init = false;\n\n    // Get element object\n    var element = KTUtil.getById(elementId);\n    var body = KTUtil.getBody();\n\n    if (!element) {\n        return;\n    }\n\n    // Default options\n    var defaultOptions = {\n        startStep: 1,\n        clickableSteps: false, // to make steps clickable this set value true and add data-wizard-clickable=\"true\" in HTML for class=\"wizard\" element\n        navigation: true\n    };\n\n    ////////////////////////////\n    // ** Private Methods  ** //\n    ////////////////////////////\n\n    var Plugin = {\n        /**\n         * Construct\n         */\n\n        construct: function(options) {\n            if (KTUtil.data(element).has('wizard')) {\n                the = KTUtil.data(element).get('wizard');\n            } else {\n                // reset menu\n                Plugin.init(options);\n\n                // build menu\n                Plugin.build();\n\n                KTUtil.data(element).set('wizard', the);\n            }\n\n            return the;\n        },\n\n        /**\n         * Init wizard\n         */\n        init: function(options) {\n            the.element = element;\n            the.events = [];\n\n            // merge default and user defined options\n            the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n            // Elements\n            the.steps = KTUtil.findAll(element, '[data-wizard-type=\"step\"]');\n\n            the.btnNext = KTUtil.find(element, '[data-wizard-type=\"action-next\"]');\n            the.btnPrev = KTUtil.find(element, '[data-wizard-type=\"action-prev\"]');\n            the.btnSubmit = KTUtil.find(element, '[data-wizard-type=\"action-submit\"]');\n\n            // Variables\n            the.events = [];\n            the.lastStep = 0;\n            the.currentStep = 1;\n            the.newStep = 0;\n            the.stopped = false;\n            the.totalSteps = the.steps.length;\n\n            // Init current step\n            if (the.options.startStep > 1) {\n                Plugin.goTo(the.options.startStep);\n            }\n\n            // Init UI\n            Plugin.updateUI();\n        },\n\n        /**\n         * Build Form Wizard\n         */\n        build: function() {\n            if (the.options.navigation) {\n                // Next button event handler\n                KTUtil.addEvent(the.btnNext, 'click', function(e) {\n                    e.preventDefault();\n\n                    // Set new step number\n                    Plugin.setNewStep(Plugin.getNextStep());\n\n                    // Trigger change event\n                    if (Plugin.eventTrigger('change') !== false) {\n                        Plugin.goTo(Plugin.getNextStep());\n                    }\n                });\n\n                // Prev button event handler\n                KTUtil.addEvent(the.btnPrev, 'click', function(e) {\n                    e.preventDefault();\n\n                    // Set new step number\n                    Plugin.setNewStep(Plugin.getPrevStep());\n\n                    // Trigger change event\n                    if (Plugin.eventTrigger('change') !== false) {\n                        Plugin.goTo(Plugin.getPrevStep());\n                    }\n                });\n\n                // Submit button event handler\n                KTUtil.addEvent(the.btnSubmit, 'click', function(e) {\n                    e.preventDefault();\n\n                    Plugin.eventTrigger('submit');\n                });\n            }\n\n            if (the.options.clickableSteps === true) {\n                KTUtil.on(element, '[data-wizard-type=\"step\"]', 'click', function() {\n                    var index = KTUtil.index(this) + 1;\n\n                    if (index !== the.currentStep) {\n                        Plugin.setNewStep(index);\n\n                        // Trigger change event\n                        if (Plugin.eventTrigger('change') !== false) {\n                            Plugin.goTo(index);\n                        }\n                    }\n                });\n            }\n        },\n\n        /**\n         * Handles wizard click wizard\n         */\n        goTo: function(number) {\n            // Skip if stopped\n            if (the.stopped === true) {\n                the.stopped = false;\n                return;\n            }\n\n            // Skip if this step is already shown\n            if (number === the.currentStep || number > the.totalSteps || number < 0) {\n                return;\n            }\n\n            // Validate step number\n            number = parseInt(number);\n\n            // Set current step\n            the.lastStep = the.currentStep;\n            the.currentStep = number;\n            the.newStep = 0;\n\n            Plugin.updateUI();\n\n            Plugin.eventTrigger('changed');\n\n            return the;\n        },\n\n        /**\n         * Stop wizard\n         */\n        stop: function() {\n            the.stopped = true;\n        },\n\n        /**\n         * Resume wizard\n         */\n        resume: function() {\n            the.stopped = false;\n        },\n\n        /**\n         * Check last step\n         */\n        isLastStep: function() {\n            return the.currentStep === the.totalSteps;\n        },\n\n        /**\n         * Check first step\n         */\n        isFirstStep: function() {\n            return the.currentStep === 1;\n        },\n\n        /**\n         * Check between step\n         */\n        isBetweenStep: function() {\n            return Plugin.isLastStep() === false && Plugin.isFirstStep() === false;\n        },\n\n        /**\n         * Update wizard UI after step change\n         */\n        updateUI: function() {\n            var stepType = '';\n            var index = the.currentStep - 1;\n\n            if (Plugin.isLastStep()) {\n                stepType = 'last';\n            } else if (Plugin.isFirstStep()) {\n                stepType = 'first';\n            } else {\n                stepType = 'between';\n            }\n\n            KTUtil.attr(the.element, 'data-wizard-state', stepType);\n\n            // Steps\n            var steps = KTUtil.findAll(the.element, '[data-wizard-type=\"step\"]');\n\n            if (steps && steps.length > 0) {\n                for (var i = 0, len = steps.length; i < len; i++) {\n                    if (i == index) {\n                        KTUtil.attr(steps[i], 'data-wizard-state', 'current');\n                    } else {\n                        if (i < index) {\n                            KTUtil.attr(steps[i], 'data-wizard-state', 'done');\n                        } else {\n                            KTUtil.attr(steps[i], 'data-wizard-state', 'pending');\n                        }\n                    }\n                }\n            }\n\n            // Steps Info\n            var stepsInfo = KTUtil.findAll(the.element, '[data-wizard-type=\"step-info\"]');\n            if (stepsInfo &&stepsInfo.length > 0) {\n                for (var i = 0, len = stepsInfo.length; i < len; i++) {\n                    if (i == index) {\n                        KTUtil.attr(stepsInfo[i], 'data-wizard-state', 'current');\n                    } else {\n                        KTUtil.removeAttr(stepsInfo[i], 'data-wizard-state');\n                    }\n                }\n            }\n\n            // Steps Content\n            var stepsContent = KTUtil.findAll(the.element, '[data-wizard-type=\"step-content\"]');\n            if (stepsContent&& stepsContent.length > 0) {\n                for (var i = 0, len = stepsContent.length; i < len; i++) {\n                    if (i == index) {\n                        KTUtil.attr(stepsContent[i], 'data-wizard-state', 'current');\n                    } else {\n                        KTUtil.removeAttr(stepsContent[i], 'data-wizard-state');\n                    }\n                }\n            }\n        },\n\n        /**\n         * Get next step number\n         */\n        getNextStep: function() {\n            if (the.totalSteps >= (the.currentStep + 1)) {\n                return the.currentStep + 1;\n            } else {\n                return the.totalSteps;\n            }\n        },\n\n        /**\n         * Get prev step number\n         */\n        getPrevStep: function() {\n            if ((the.currentStep - 1) >= 1) {\n                return the.currentStep - 1;\n            } else {\n                return 1;\n            }\n        },\n\n        /**\n         * Get new step number\n         */\n        getNewStep: function() {\n            return the.newStep;\n        },\n\n        /**\n         * Set new step\n         */\n        setNewStep: function(step) {\n            the.newStep = step;\n        },\n\n        /**\n         * Trigger events\n         */\n        eventTrigger: function(name, nested) {\n            //KTUtil.triggerCustomEvent(name);\n            for (var i = 0; i < the.events.length; i++) {\n                var event = the.events[i];\n                if (event.name == name) {\n                    if (event.one == true) {\n                        if (event.fired == false) {\n                            the.events[i].fired = true;\n                            return event.handler.call(this, the);\n                        }\n                    } else {\n                        return event.handler.call(this, the);\n                    }\n                }\n            }\n        },\n\n        addEvent: function(name, handler, one) {\n            the.events.push({\n                name: name,\n                handler: handler,\n                one: one,\n                fired: false\n            });\n\n            return the;\n        }\n    };\n\n    //////////////////////////\n    // ** Public Methods ** //\n    //////////////////////////\n\n    /**\n     * Set default options\n     */\n\n    the.setDefaults = function(options) {\n        defaultOptions = options;\n    };\n\n    /**\n     * Go to the next step\n     */\n    the.goNext = function() {\n        return Plugin.goTo(Plugin.getNextStep());\n    };\n\n    /**\n     * Go to the prev step\n     */\n    the.goPrev = function() {\n        return Plugin.goTo(Plugin.getPrevStep());\n    };\n\n    /**\n     * Go to the last step\n     */\n    the.goLast = function() {\n        return Plugin.goTo(Plugin.getLastStep());\n    };\n\n    /**\n     * Go to the first step\n     */\n    the.goFirst = function() {\n        return Plugin.goTo(Plugin.getFirstStep());\n    };\n\n    /**\n     * Go to a step\n     */\n    the.goTo = function(number) {\n        return Plugin.goTo(number);\n    };\n\n    /**\n     * Stop wizard\n     */\n    the.stop = function() {\n        return Plugin.stop();\n    };\n\n    /**\n     * Resume wizard\n     */\n    the.resume = function() {\n        return Plugin.resume();\n    };\n\n    /**\n     * Get current step number\n     */\n    the.getStep = function() {\n        return the.currentStep;\n    };\n\n    /**\n     * Get new step number\n     */\n    the.getNewStep = function() {\n        return Plugin.getNewStep();\n    };\n\n    /**\n     * Set new step number\n     */\n    the.setNewStep = function(number) {\n        Plugin.setNewStep(number);\n    };\n\n    /**\n     * Check last step\n     */\n    the.isLastStep = function() {\n        return Plugin.isLastStep();\n    };\n\n    /**\n     * Check first step\n     */\n    the.isFirstStep = function() {\n        return Plugin.isFirstStep();\n    };\n\n    /**\n     * Attach event(\"change\", \"changed\", \"submit\")\n     */\n    the.on = function(name, handler) {\n        return Plugin.addEvent(name, handler);\n    };\n\n    /**\n     * Attach event that will be fired once\n     */\n    the.one = function(name, handler) {\n        return Plugin.addEvent(name, handler, true);\n    };\n\n    // Construct plugin\n    Plugin.construct.apply(the, [options]);\n\n    return the;\n};\n\n// webpack support\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    // module.exports = KTWizard;\n}\n\nexport default KTWizard;"],"sourceRoot":"webpack:///"}