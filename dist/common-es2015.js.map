{"version":3,"sources":["./src/app/modules/asset/_services/fake/deals.service.ts","./src/app/_fake/fake-helpers/http-extenstions.ts","./src/app/modules/auth/registration/confirm-password.validator.ts","./src/app/modules/auth/_models/user.model.ts","./src/app/modules/i18n/translation.module.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["\nimport { Injectable, OnDestroy, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, forkJoin, Observable } from 'rxjs';\nimport { exhaustMap, map } from 'rxjs/operators';\nimport { TableService, TableResponseModel, ITableState, BaseModel, PaginatorState, SortState, GroupingState } from '../../../../_metronic/shared/crud-table';\nimport { Deal } from '../../_models/deals.model';\nimport { baseFilter } from '../../../../_fake/fake-helpers/http-extenstions';\nimport { environment } from '../../../../../environments/environment';\nimport { Router } from '@angular/router';\n\nconst DEFAULT_STATE: ITableState = {\n    filter: {},\n    paginator: new PaginatorState(),\n    sorting: new SortState(),\n    searchTerm: '',\n    grouping: new GroupingState(),\n    entityId: undefined\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DealsService extends TableService<Deal> implements OnDestroy {\n    API_URL = `${environment.apiUrl}/deals`;\n    constructor(@Inject(HttpClient) http, private baseHttp: HttpClient) {\n        super(http);\n    }\n\n    find(tableState: ITableState): Observable<TableResponseModel<Deal>> {\n        return this.http.get<Deal[]>(this.API_URL).pipe(\n            map((response: Deal[]) => {\n                const filteredResult = baseFilter(response, tableState);\n                const result: TableResponseModel<Deal> = {\n                    items: filteredResult.items,\n                    total: filteredResult.total\n                };\n\n                console.log(result);\n                return result;\n            })\n        );\n    }\n\n    deleteItems(ids: number[] = []): Observable<any> {\n        const tasks$ = [];\n        ids.forEach(id => {\n            tasks$.push(this.delete(id));\n        });\n        return forkJoin(tasks$);\n    }\n\n    updateStatusForItems(ids: number[], status: number): Observable<any> {\n        return this.http.get<Deal[]>(this.API_URL).pipe(\n            map((customers: Deal[]) => {\n                return customers.filter(c => ids.indexOf(c.id) > -1).map(c => {\n                    //c.statusName = status;\n                    return c;\n                });\n            }),\n            exhaustMap((customers: Deal[]) => {\n                const tasks$ = [];\n                customers.forEach(customer => {\n                    tasks$.push(this.update(customer));\n                });\n                return forkJoin(tasks$);\n            })\n        );\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(sb => sb.unsubscribe());\n    }\n}\n","import { ITableState } from '../../_metronic/shared/crud-table';\n\nexport function baseFilter(entities: any[], requestObj: ITableState) {\n  // Filtration\n  let entitiesResult = filterArray(entities, requestObj);\n  // Search\n  entitiesResult = searchInArray(entitiesResult, requestObj.searchTerm);\n\n  // Sorting\n  // start\n  if (requestObj.sorting.column) {\n    entitiesResult = sortArray(entitiesResult, requestObj.sorting.column, requestObj.sorting.direction);\n  }\n  // end\n\n  // Paginator\n  // start\n  const totalCount = entitiesResult.length;\n  const startPosition = (requestObj.paginator.page - 1) * requestObj.paginator.pageSize;\n  const endPosition = startPosition + requestObj.paginator.pageSize;\n  entitiesResult = entitiesResult.slice(startPosition, endPosition);\n  // end\n\n  const responseObj = {\n    items: entitiesResult,\n    total: totalCount\n  };\n  return responseObj;\n}\n\nexport function sortArray(incomingArray: any[], sortField: string = '', sortOrder: string = 'asc'): any[] {\n  if (!sortField) {\n    return incomingArray;\n  }\n\n  let result: any[] = [];\n  result = incomingArray.sort((a, b) => {\n    if (a[sortField] < b[sortField]) {\n      return sortOrder === 'asc' ? -1 : 1;\n    }\n\n    if (a[sortField] > b[sortField]) {\n      return sortOrder === 'asc' ? 1 : -1;\n    }\n\n    return 0;\n  });\n  return result;\n}\n\nexport function filterArray(incomingArray: any[], requestObj: ITableState): any[] {\n  if (!requestObj || !requestObj.filter) {\n    return incomingArray;\n  }\n\n  let result: any[] = incomingArray;\n  const filtrationFields = Object.keys(requestObj.filter);\n  filtrationFields.forEach((keyName: string) => {\n    // tslint:disable-next-line:triple-equals\n    result = result.filter(el => el[keyName] == requestObj.filter[keyName]);\n  });\n  return result;\n}\n\nexport function searchInArray(incomingArray: any[], searchTerm: string = ''): any[] {\n  if (!searchTerm) {\n    return incomingArray;\n  }\n\n  const acceptableForSearchTypes = { number: 1, string: 2 };\n  const result = incomingArray.filter(row => {\n    let termIsFoundInRow = false;\n    const keys = Object.keys(row).filter(keyName => acceptableForSearchTypes[typeof row[keyName]] && row[keyName]);\n    for (const keyName of keys) {\n      if (row[keyName].toString().toLowerCase().indexOf(searchTerm) > -1) {\n        termIsFoundInRow = true;\n        break;\n      }\n    }\n    return termIsFoundInRow;\n  });\n  return result;\n}\n","import { AbstractControl } from '@angular/forms';\n\nexport class ConfirmPasswordValidator {\n  /**\n   * Check matching password with confirm password\n   * @param control AbstractControl\n   */\n  static MatchPassword(control: AbstractControl) {\n    const password = control.get('password').value;\n\n    const confirmPassword = control.get('cPassword').value;\n\n    if (password !== confirmPassword) {\n      control.get('cPassword').setErrors({ ConfirmPassword: true });\n    } else {\n      return null;\n    }\n  }\n}\n","import { AuthModel } from './auth.model';\nimport { AddressModel } from './address.model';\nimport { SocialNetworksModel } from './social-networks.model';\n\nexport class UserModel extends AuthModel {\n  id: number;\n  username: string;\n  password: string;\n  fullname: string;\n  email: string;\n  pic: string;\n  roles: number[];\n  occupation: string;\n  companyName: string;\n  phone: string;\n  address?: AddressModel;\n  socialNetworks?: SocialNetworksModel;\n  // personal information\n  firstname: string;\n  lastname: string;\n  website: string;\n  // account information\n  language: string;\n  timeZone: string;\n  communication: {\n    email: boolean,\n    sms: boolean,\n    phone: boolean\n  };\n  // email settings\n  emailSettings: {\n    emailNotification: boolean,\n    sendCopyToPersonalEmail: boolean,\n    activityRelatesEmail: {\n      youHaveNewNotifications: boolean,\n      youAreSentADirectMessage: boolean,\n      someoneAddsYouAsAsAConnection: boolean,\n      uponNewOrder: boolean,\n      newMembershipApproval: boolean,\n      memberRegistration: boolean\n    },\n    updatesFromKeenthemes: {\n      newsAboutKeenthemesProductsAndFeatureUpdates: boolean,\n      tipsOnGettingMoreOutOfKeen: boolean,\n      thingsYouMissedSindeYouLastLoggedIntoKeen: boolean,\n      newsAboutMetronicOnPartnerProductsAndOtherServices: boolean,\n      tipsOnMetronicBusinessProducts: boolean\n    }\n  };\n\n  setUser(user: any) {\n    this.id = user.id;\n    this.username = user.username || '';\n    this.password = user.password || '';\n    this.fullname = user.fullname || '';\n    this.email = user.email || '';\n    this.pic = user.pic || './assets/media/users/default.jpg';\n    this.roles = user.roles || [];\n    this.occupation = user.occupation || '';\n    this.companyName = user.companyName || '';\n    this.phone = user.phone || '';\n    this.address = user.address;\n    this.socialNetworks = user.socialNetworks;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [CommonModule, TranslateModule],\n  exports: [CommonModule, TranslateModule],\n})\nexport class TranslationModule {}\n"],"sourceRoot":"webpack:///"}